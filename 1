require 'omniauth-oauth2'

module OmniAuth
  module Strategies
    class YahooJp < OmniAuth::Strategies::OAuth2

args [:client_id, :client_secret]

option :client_id, nil
option :client_secret, nil

      option :name, 'yahoojp'
      option :client_options, {
        :site => 'https://auth.login.yahoo.co.jp',
        :authorize_url => '/yconnect/v1/authorization',
        :token_url => '/yconnect/v1/token'
      }

      option :authorize_options, [:display, :prompt, :scope]
#			option :token_params, {
#:headers => {'Authorization' => HTTPAuth::Basic.pack_authorization(client_id, client_secret)}}
option :auth_token_params, {:mode => :header}

      def request_phase
        super
				#options.client_id
      end
      
      def authorize_params
        super.tap do |params|
          %w[scope, client_options].each do |v|
            if request.params[v]
              params[v.to_sym] = request.params[v]
            end
          end
        end
      end

      uid { raw_info['user_id'] }

      info do
        prune!({
          :name       => raw_info['name'],
          :email      => raw_info['email'],
          :first_name => raw_info['given_name'],
          :last_name  => raw_info['family_name'],
          :urls => {
            'YahooJp' => raw_info['link'],
          },
        })
      end

      extra do
        hash = {}
        hash[:raw_info] = raw_info unless skip_info?
        prune! hash
      end

      def token_params
				options.token_params.merge(options.token_options.inject({}){|h,k| h[k.to_sym] = options[k] if options[k]; h}).merge(:headers => {'Authorization' => HTTPAuth::Basic.pack_authorization(client_id, client_secret)})
			end

      def raw_info
				access_token.options[:mode] = :header
        @raw_info ||= access_token.get('https://userinfo.yahooapis.jp/yconnect/v1/attribute?schema=openid').parsed
      end

      def prune!(hash)
        hash.delete_if do |_, value|
          prune!(value) if value.is_a?(Hash)
          value.nil? || (value.respond_to?(:empty?) && value.empty?)
        end
      end

			def build_access_token
				code = request.params['code']
				params = {'grant_type' => 'authorization_code', 'code' => code, :redirect_uri => callback_url}

				client.get_token(params.merge(token_params.to_hash(:symbolize_keys => true)), deep_symbolize(options.auth_token_params))
			end

    end
  end
end

OmniAuth.config.add_camelization 'yahoojp', 'YahooJp'
